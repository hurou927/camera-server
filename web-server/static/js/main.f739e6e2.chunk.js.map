{"version":3,"sources":["waraiotoko.jpg","reactCanvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CameraImg","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setTimeoutGetCameraImageAsync","bind","assertThisInitialized","state","image_base64","imageWidth","urlToGetImg","concat","hostip","timer","undefined","nextProps","setState","width","isActive","clearTimeout","setTimeout","url","fetch","mode","res","json","image","console","error","_context2","t0","imageSrc","defaultImg","react_default","a","createElement","src","alt","Component","defaultWidht","App","localStorage","getItem","checked","items","label","icon","widthBySlider","_this2","style","padding","className","tabmenu","model","activeItem","onTabChange","e","value","inputtext","id","onChange","setItem","target","margin","inputswitch","slider","min","max","reactCanvas","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f739e6e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/waraiotoko.d5603eea.jpg\";","import React, { Component } from 'react';\nimport fetch from 'node-fetch';\nimport defaultImg from './waraiotoko.jpg';\n\n\nconst delayms = 30;\n// const getImgURL = 'http://192.168.11.8:8002/camera';\n\nclass CameraImg extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.setTimeoutGetCameraImageAsync = this.setTimeoutGetCameraImageAsync.bind(this);\n        this.state = {\n            image_base64: '', \n            imageWidth: props.imageWidth || 512,\n            urlToGetImg: `http://${props.hostip}/camera`\n\n        };\n\n        this.timer = undefined;\n    }\n\n    async componentDidMount() {\n    }\n    \n    componentWillReceiveProps(nextProps) {\n        \n        \n        this.setState({imageWidth:nextProps.width})\n        this.setState({ urlToGetImg: `http://${nextProps.hostip}/camera`})\n\n        if (nextProps.isActive === false && this.timer !== undefined) {\n            clearTimeout(this.timer);\n        } else if (nextProps.isActive === true) {\n            this.timer = setTimeout(this.setTimeoutGetCameraImageAsync, delayms);\n        }\n\n        \n    }\n\n\n\n    async setTimeoutGetCameraImageAsync(){\n        try{\n            if (this.props.isActive) {\n                const url = this.state.urlToGetImg;\n                const res = await fetch(url, { mode: 'cors' });\n                const json = await res.json();\n                this.setState({ image_base64: json.image })\n                this.timer = setTimeout(this.setTimeoutGetCameraImageAsync, delayms);\n            }\n        } catch(error){\n            console.error(error);\n        }\n    }\n\n\n    render() {\n        \n        let imageSrc;\n        \n        if (this.props.isActive) {\n            imageSrc = `data:image/jpeg;base64,${this.state.image_base64}`;\n        } else {\n            imageSrc = defaultImg;\n        }\n        return (\n            <div>\n                <img src={imageSrc} \n                alt=\"Get Camera\"\n                width={this.state.imageWidth}/>\n            </div>\n        );\n    }\n}\n\nexport default CameraImg;\n\n","import React, { Component } from 'react';\nimport 'primereact/resources/themes/nova-colored/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\n\nimport CameraImg  from './reactCanvas';\n\n// import { Accordion, AccordionTab } from 'primereact/accordion';\nimport { InputSwitch } from 'primereact/inputswitch';\nimport { TabMenu } from 'primereact/tabmenu';\nimport { Slider } from 'primereact/slider';\nimport { InputText } from 'primereact/inputtext';\n\nconst defaultWidht = 512;\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    const hostip = localStorage.getItem('hostip') || '192.168.11.8:8002' ;\n\n    this.state = {\n      checked: false,\n      items: [\n        { label: 'Camera', icon: 'pi pi-fw pi-home' }\n      ],\n      widthBySlider: defaultWidht,\n      hostip: hostip\n    };\n    \n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          padding: '20px 20px 20px 30px',    \n        }}\n      >\n        <div className=\"p-grid p-dir-col\">\n          <div className=\"p-col\">\n            <TabMenu \n              model={this.state.items} \n              activeItem={this.state.activeItem} \n              onTabChange={(e) => this.setState({ activeItem: e.value })} \n            />\n          </div>\n        </div>\n        <div className=\"p-grid\">\n          {/* <div className=\"p-col-fixed\" style={{ width: '200px' }}>\n            <Accordion>\n              <AccordionTab header=\"Header I\">\n                Content I\n              </AccordionTab>\n              <AccordionTab header=\"Header II\">\n                Content II\n              </AccordionTab>\n              <AccordionTab header=\"Header III\">\n                Content III\n              </AccordionTab>\n            </Accordion>\n          </div> */}\n          <div className=\"p-col\">\n\n\n\n          \n          {/* ######## INPUT IP ADDRESS ################*/}\n            <div>  \n              <span className=\"p-float-label\">\n                <h4>HOST IP</h4>\n                <InputText \n                  id=\"in\" \n                  value={this.state.hostip}\n                  onChange={(e) => {\n                    localStorage.setItem('hostip', e.target.value);\n                    this.setState({ hostip: e.target.value })}\n                  }\n                  style={{ \n                    width: '12em',\n                    margin: '10px 0 10px 0',\n                    padding: '10px 0 10px 0'\n                  }}\n                />\n              </span>\n            </div>\n\n\n            {/* ######## CAMERA SWITCH ################*/}\n            <div>\n              <h4>{ this.state.checked ? 'ON' : 'OFF'}</h4>\n              <InputSwitch \n                checked={this.state.checked} \n                onChange={(e) => this.setState({ checked: e.value })} \n              />\n            </div>\n            \n\n            {/* ######## WIDTH ################*/}\n            <div style={{\n              margin: '10px 0 10px 0',\n              padding: '10px 0 10px 0'\n            }}>\n              <h3>Width={this.state.widthBySlider}</h3>\n              <Slider\n                min={512}\n                max={1024}\n                value={this.state.widthBySlider}\n                onChange={(e) => this.setState({ widthBySlider: e.value })}\n                style={{ width: '14em' }}\n              />\n            </div>\n\n            {/* ######## Show Image ################*/}\n            <div>\n              <CameraImg \n                isActive={this.state.checked} \n                width={this.state.widthBySlider}\n                hostip={this.state.hostip}  \n              />\n            </div>\n          </div>\n        \n        \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}